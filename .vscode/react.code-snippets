{
  // Use: https://snippet-generator.app/ to generate snippets
  // Place your cxm workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Create component": {
    "prefix": "new component",
    "body": [
      "import styles from './${1:ComponentName}.module.scss'",
      "",
      "const ${1:ComponentName} = ({}: IProps) => {",
      "  return (",
      "    <div className={styles.container}>",
      "       <>",
      "       </>",
      "    </div>",
      "  )",
      "}",
      "",
      "export default ${1:ComponentName}",
      "",
      "interface IProps {}"
    ],
    "description": "Create component"
  },
  "New modal component with position": {
    "prefix": "new modal with position",
    "body": [
      "import { createContext, ReactNode, RefObject, useCallback, useContext, useState } from 'react'",
      "import ${1:UIComponent} from './${1:UIComponent}'",
      "",
      "interface Context {",
      "  enabled: boolean",
      "  position: { x: number; y: number } | null",
      "}",
      "",
      "interface ContextActions extends Context {",
      "  showControls: (position: { x: number; y: number }) => void",
      "  hideControls: () => void",
      "}",
      "",
      "const initialState = {",
      "  enabled: false,",
      "  position: null,",
      "  showControls: () => {},",
      "  hideControls: () => {},",
      "}",
      "",
      "const Context = createContext<ContextActions>(initialState)",
      "",
      "export const use${2:ExportComponent}Modal = () => useContext(Context)",
      "",
      "const Provider = ({ children, rootRef }: { children: ReactNode; rootRef: RefObject<HTMLDivElement> }) => {",
      "  const [state, setState] = useState<Context>(initialState)",
      "",
      "  const showControls = (position: { x: number; y: number }) => {",
      "    if (!position || !rootRef.current) {",
      "      return",
      "    }",
      "",
      "    const bodyTop = rootRef ? rootRef.current.getBoundingClientRect().top : 0",
      "    const bodyLeft = rootRef ? rootRef.current.getBoundingClientRect().left : 0",
      "",
      "    setState({",
      "      enabled: true,",
      "      position: { x: position.x - bodyLeft, y: position.y - bodyTop },",
      "    })",
      "  }",
      "",
      "  const hideControls = useCallback(() => {",
      "    setState(initialState)",
      "  }, [])",
      "",
      "  return <Context.Provider value={{ ...state, showControls, hideControls }}>{children}</Context.Provider>",
      "}",
      "",
      "const Component = (props: IProps) => {",
      "  const { enabled, position, hideControls } = use${2:ExportComponent}Modal()",
      "  return <>{enabled && position && <${1:UIComponent} style={{ left: position.x, top: position.y }} onDismiss={hideControls} {...props} />}</>",
      "}",
      "",
      "const ${2:ExportComponent} = { Provider, Component }",
      "",
      "export default ${2:ExportComponent}",
      "",
      "interface IProps {}",
      ""
    ],
    "description": "New modal component with position"
  },
  "Import font awesome variables": {
    "prefix": "new icon",
    "body": [
      "import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'",
      "import {  } from '@fortawesome/free-regular-svg-icons'",
      "import {  } from '@fortawesome/free-solid-svg-icons'",
      "<FontAwesomeIcon style={{ fontSize: 14 }} icon={faLock} />"
    ],
    "description": "Import font awesome variables"
  },
  "Set classname": {
    "prefix": "className={styles.",
    "body": [
      "className={styles.${1:example}}"
    ],
    "description": "Set classname"
  }
  // SCSS
  "Import scss variables": {
    "prefix": "scss vars",
    "body": ["@import 'styles/variables';"],
    "description": "Import scss variables"
  }
}
